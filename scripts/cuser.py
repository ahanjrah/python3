#!/usr/bin/env python3
#   Author  : Aman Hanjrah
#   Date    : 14 Sept, 2018
#   License : GPLv3
#   Description: This script can be used to add a user to new system/server along with the creation of public/private key pair, which then will be used to gain ssh access to this server.
#
#   Note: Make sure to disable root login and Password auth in ssh config to only use ssh keys to gain access which will ensure tight security.
#   Tested on CentOS6/7 server, Ubuntu 1604 LTS and Suse Linux.
#
"""
Usage: cuser.py <username> <passphrase>(optional)

When run, checks if the provided username exists, if not, create/add user generate ssh keys for secure login.
<passphrase> is the password for private key which is needed at the time of login to destination server.
"""
import os
import sys
import pwd
import grp
import random
import string
import subprocess
from shutil import copyfileobj


def _prechck():
    """
    Checks if the username and passphrase (optional) is provided or not. If passphrase is not provided, generate
    a 16 character/digits passphrase.
    """
    try:
        _u = sys.argv[1]

    except IndexError:
        print("You need to provide the username. Please try again")
        sys.exit(1)

    if len(sys.argv) > 2:               # check if user provided passphrase, if not, generate one
        _passw = sys.argv[2]
        return _u, _passw
    else:
        _passw = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(16)])
        return _u, _passw


# Define some global variables which will be used in script later.
_user = _prechck()[0]
_passw = _prechck()[1]
print("User: " + _user + "; Password: " + _passw)       # print username and passphrase
input("Hit enter to accept (CTRL + X to exit)")         # ask user input
_sshdir = "/home/" + _user + "/.ssh"
_keyname = _sshdir + "/key-" + _user


def _checkusername():
    """
    Checks if the username already exists or not, if it does, exit the script; if it does not, create it.
    """
    try:
        pwd.getpwnam(_user)
    except KeyError:
        subprocess.run(['useradd', '-m', _user])        # User added
    else:
        print("User already exists, exiting...")
        sys.exit(1)


def _genkeys():
    """
    Checks if the .ssh directory exist or not, if not, create it and change directory into it; followed by generating keys and modifying the ownership and permissions and finally print the
        informationfor user to copy.
    """
    if ".ssh" not in os.listdir("/home/" + _user):
        os.mkdir(_sshdir)

    os.chdir(_sshdir)
    subprocess.run(['ssh-keygen', '-t', 'rsa', '-b', '4096', '-C', 'Generated by python script', '-P', _passw, '-f', _keyname, '-q'])
    _u = pwd.getpwnam(_user).pw_uid                         # UID
    _g = grp.getgrnam(_user).gr_gid                         # GID
    os.chown(_sshdir, _u, _g)
    os.chown(_keyname, _u, _g)
    os.chown(_keyname + ".pub", _u, _g)
    os.chmod(_keyname, 0o600)
    with open("authorized_keys", 'a') as output, open(_keyname + ".pub") as input:
        copyfileobj(input, output)
    os.chown("authorized_keys", _u, _g)
    os.chmod("authorized_keys", 0o600)

    subprocess.run(['clear'])
    print("1) Username: " + _user)
    print("2) Passphrase: " + _passw)
    print("3) SSH Private key: " + "/home/" + _user + "/.ssh/key-" + _user)
    print("6) Don't forget to copy the private key to your system.")
    sys.exit(0)


if __name__ == "__main__":
    _checkusername()
    _genkeys()
#
